
from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI
import streamlit as st
import tempfile
import os
from pathlib import Path
import mimetypes

# --- AUTENTICACI√ìN SIMPLE ---
PASSWORD = "SECRETMEDIA"
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    pw = st.text_input("Introduce la contrase√±a para acceder", type="password")
    if pw == PASSWORD:
        st.session_state.authenticated = True
        st.rerun()
    else:
        st.stop()

client = OpenAI()

# --- CONFIGURACI√ìN INICIAL ---
st.set_page_config(page_title="Convertir v√≠deo en texto")
st.title("üìù Conversor de v√≠deo a texto para SMN")

PROMPTS = {
    "Valencia Secreta": "Prompt Valencia Secreta...",
    "Barcelona Secreta": "Prompt Barcelona Secreta...",
    "V2 Valencia Secreta": "Prompt V2 Valencia Secreta..."
}

EDITORS = {
    "√Ålvaro Llagunes": "Te llamas √Ålvaro Llagunes, eres redactor en Secret Media Network con formaci√≥n en Periodismo y Cine Documental, y muchos a√±os de experiencia escribiendo en medios digitales como Madrid Secreto, Valencia Secreta y Barcelona Secreta, donde desarrollas contenidos editoriales, SEO, branded content, redacci√≥n de guiones y gesti√≥n de redes sociales; fuiste redactor ejecutivo entre 2019 y 2020, coordinando equipos y contenidos para los medios en espa√±ol del grupo; trabajaste como periodista en pr√°cticas en TVE (Informe Semanal) elaborando reportajes y entrevistas; has sido asistente de marketing y comunicaci√≥n online en Dinamarca para la empresa Princh A/S, centrado en comunicaci√≥n interna y redes sociales; y redactor de contenidos para la agencia CONNEXT en Valencia, enfocado en estrategias digitales; tu estilo de escritura se caracteriza por ser claro, directo y contextualizado, como en art√≠culos sobre el acceso al circuito de Montmel√≥ por 5 euros, la evoluci√≥n de los alquileres en Barcelona en la √∫ltima d√©cada o la historia del mejor barman de Espa√±a trabajando en Paradiso, uno de los mejores bares del mundo, todo lo cual te posiciona como un profesional vers√°til con experiencia en redacci√≥n period√≠stica, contenido digital y enfoque creativo, preparado para transformar transcripciones en piezas originales de m√°s de 400 palabras adaptadas al estilo del medio."
}

video_file = st.file_uploader("Sube un v√≠deo (.mp4, .mov, .avi...):", type=None)

if video_file:
    with tempfile.NamedTemporaryFile(delete=False, suffix=Path(video_file.name).suffix) as tmp:
        tmp.write(video_file.read())
        tmp_path = tmp.name

    file_size = os.path.getsize(tmp_path)
    st.info(f"Tama√±o del archivo: {file_size} bytes")

    if file_size == 0:
        st.error("‚ùå El archivo est√° vac√≠o. Por favor, sube un v√≠deo con audio.")
        st.stop()

    mime_type, _ = mimetypes.guess_type(tmp_path)
    if not mime_type:
        mime_type = "video/mp4"

    editor = st.selectbox("¬øQui√©n es el editor del contenido?", ["Ningun@", *EDITORS.keys()])
    site = st.selectbox("¬øPara qu√© site es este art√≠culo?", ["Selecciona...", *PROMPTS.keys()])

    if site != "Selecciona...":
        extra_prompt = st.text_area("¬øQuieres a√±adir instrucciones adicionales al prompt? (opcional)")

        if st.button("üé¨ Generar art√≠culo"):
            try:
                with st.spinner("‚è≥ Transcribiendo v√≠deo con Whisper..."):
                    with open(tmp_path, "rb") as audio_file:
                        transcript_response = client.audio.transcriptions.create(
                            model="whisper-1",
                            file=audio_file,
                            filename=Path(tmp_path).name,
                            file_content_type=mime_type,
                            response_format="json"
                        )
                    transcription = transcript_response.text

                st.success("‚úÖ Transcripci√≥n completada")
                st.text_area("Texto transcrito:", transcription, height=200)

                full_prompt = PROMPTS[site]
                if editor != "Ningun@":
                    full_prompt += "\n\nContexto del editor:\n" + EDITORS[editor]
                full_prompt += "\n\nTranscripci√≥n:\n" + transcription
                if extra_prompt:
                    full_prompt += "\n\nInstrucciones adicionales del editor:\n" + extra_prompt

                with st.spinner("üß† Generando art√≠culo con ChatGPT..."):
                    chat_response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[
                            {"role": "system", "content": "Eres un redactor profesional especializado en contenido local."},
                            {"role": "user", "content": full_prompt}
                        ],
                        temperature=0.7
                    )
                    article = chat_response.choices[0].message.content

                st.success("‚úÖ Art√≠culo generado")
                st.subheader("üîé Vista previa del art√≠culo")
                st.markdown(article, unsafe_allow_html=True)

                st.subheader("üìã C√≥digo Markdown")
                st.code(article)

                st.download_button("‚¨áÔ∏è Descargar como HTML", data=article, file_name="articulo.html", mime="text/html")
                st.button("üìã Copiar art√≠culo", on_click=lambda: st.toast("Texto copiado (usa Ctrl+C en el √°rea Markdown)", icon="‚úÖ"))

            except Exception as e:
                st.error(f"‚ùå Error al procesar el archivo: {str(e)}")
            finally:
                os.remove(tmp_path)

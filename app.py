from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI
import streamlit as st
import tempfile
import os
from pathlib import Path
import mimetypes

# --- AUTENTICACI√ìN SIMPLE ---
PASSWORD = "SECRETMEDIA"
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    pw = st.text_input("Introduce la contrase√±a para acceder (v.05.06.2025 15.34)", type="password")
    if pw == PASSWORD:
        st.session_state.authenticated = True
        st.rerun()
    else:
        st.stop()

client = OpenAI()

# --- CONFIGURACI√ìN INICIAL ---
st.set_page_config(page_title="Convertir v√≠deo en texto")
st.title("üìù Conversor de v√≠deo a texto para SMN")

PROMPTS = {
    "Valencia Secreta": """Tono informal, cercano y optimista, como si hablaras directamente al lector.

Primero, incluye un texto de 150 palabras aproximadamente que corresponde al campo de Secondary title. Ind√≠calo as√≠.

Introducci√≥n breve que conecta emocionalmente o con alguna referencia cultural o estacional (por ejemplo: ‚ÄúLlega el oto√±o‚Ä¶‚Äù, ‚Äú¬øQui√©n no querr√≠a volver a la infancia?‚Äù).

Despu√©s, a√±ade un siguiente p√°rrafo (con salto de l√≠nea) que ponga al lector en contexto de lo que va a leer en el contenido.

Usa titulares H2 para separar secciones principales (pero no incluyas m√°s de 3 H2 por contenido). No uses emoji en los titulares H2 ni H3.

Dentro de cada H2, emplea subt√≠tulos H3 cuando haya m√∫ltiples elementos (por ejemplo, una lista de lugares, fechas o actividades).

Cada H2 y H3 debe tener a continuaci√≥n al menos 2 p√°rrafos de texto (con salto de l√≠nea).

Siempre que sea √∫til, incluye una secci√≥n de "Informaci√≥n pr√°ctica" con iconos tipo üìç, üìÖ, ‚è∞, üí∏. Pero cada dato va con un salto de l√≠nea simple, uno tras el otro.

Destaca ideas importantes con negritas, especialmente fechas, nombres propios, ubicaciones y frases clave.

Menciona a menudo actividades relacionadas o recomendaciones extra con frases como ‚ÄúQuiz√°s te interesa‚Ä¶‚Äù o ‚ÄúTambi√©n puedes aprovechar para‚Ä¶‚Äù.

Incluye referencias culturales locales cuando sea posible (costumbres, barrios, expresiones como "esmorzaret").

Finaliza con una llamada a la acci√≥n suave o invitaci√≥n a disfrutar de la experiencia.""",

    "Barcelona Secreta": """Tono informal, cercano y optimista, como si hablaras directamente al lector.

Primero, incluye un texto de 150 palabras aproximadamente que corresponde al campo de Secondary title. Ind√≠calo as√≠.

Introducci√≥n breve que conecta emocionalmente o con alguna referencia cultural o estacional (por ejemplo: ‚ÄúLlega el oto√±o‚Ä¶‚Äù, ‚Äú¬øQui√©n no querr√≠a volver a la infancia?‚Äù).

Despu√©s, a√±ade un siguiente p√°rrafo (con salto de l√≠nea) que ponga al lector en contexto de lo que va a leer en el contenido.

Usa titulares H2 para separar secciones principales (pero no incluyas m√°s de 3 H2 por contenido). No uses emoji en los titulares H2 ni H3.

Dentro de cada H2, emplea subt√≠tulos H3 cuando haya m√∫ltiples elementos (por ejemplo, una lista de lugares, fechas o actividades).

Cada H2 y H3 debe tener a continuaci√≥n al menos 2 p√°rrafos de texto (con salto de l√≠nea).

Siempre que sea √∫til, incluye una secci√≥n de "Informaci√≥n pr√°ctica" con iconos tipo üìç, üìÖ, ‚è∞, üí∏. Pero cada dato va con un salto de l√≠nea simple, uno tras el otro.

Destaca ideas importantes con negritas, especialmente fechas, nombres propios, ubicaciones y frases clave.

Menciona a menudo actividades relacionadas o recomendaciones extra con frases como ‚ÄúQuiz√°s te interesa‚Ä¶‚Äù o ‚ÄúTambi√©n puedes aprovechar para‚Ä¶‚Äù.

Incluye referencias culturales locales cuando sea posible (costumbres, barrios, expresiones como "esmorzaret").

Finaliza con una llamada a la acci√≥n suave o invitaci√≥n a disfrutar de la experiencia."""

}

EDITORS = {
    "√Ålvaro Llagunes": "Te llamas √Ålvaro Llagunes, eres redactor en Secret Media Network con formaci√≥n en Periodismo y Cine Documental, y muchos a√±os de experiencia escribiendo en medios digitales como Madrid Secreto, Valencia Secreta y Barcelona Secreta, donde desarrollas contenidos editoriales, SEO, branded content, redacci√≥n de guiones y gesti√≥n de redes sociales; fuiste redactor ejecutivo entre 2019 y 2020, coordinando equipos y contenidos para los medios en espa√±ol del grupo; trabajaste como periodista en pr√°cticas en TVE (Informe Semanal) elaborando reportajes y entrevistas; has sido asistente de marketing y comunicaci√≥n online en Dinamarca para la empresa Princh A/S, centrado en comunicaci√≥n interna y redes sociales; y redactor de contenidos para la agencia CONNEXT en Valencia, enfocado en estrategias digitales; tu estilo de escritura se caracteriza por ser claro, directo y contextualizado, como en art√≠culos sobre el acceso al circuito de Montmel√≥ por 5 euros, la evoluci√≥n de los alquileres en Barcelona en la √∫ltima d√©cada o la historia del mejor barman de Espa√±a trabajando en Paradiso, uno de los mejores bares del mundo, todo lo cual te posiciona como un profesional vers√°til con experiencia en redacci√≥n period√≠stica, contenido digital y enfoque creativo, preparado para transformar transcripciones en piezas originales de m√°s de 400 palabras adaptadas al estilo del medio."
}

video_file = st.file_uploader("Sube un v√≠deo (.mp4, .mov, .avi...):", type=None)

if video_file:
    with tempfile.NamedTemporaryFile(delete=False, suffix=Path(video_file.name).suffix) as tmp:
        tmp.write(video_file.read())
        tmp_path = tmp.name

    file_size = os.path.getsize(tmp_path)
    st.info(f"Tama√±o del archivo: {file_size} bytes")

    if file_size == 0:
        st.error("‚ùå El archivo est√° vac√≠o. Por favor, sube un v√≠deo con audio.")
        st.stop()

    mime_type, _ = mimetypes.guess_type(tmp_path)
    if not mime_type:
        mime_type = "video/mp4"

    editor = st.selectbox("¬øQui√©n es el editor del contenido?", ["Ningun@", *EDITORS.keys()])
    site = st.selectbox("¬øPara qu√© site es este art√≠culo?", ["Selecciona...", *PROMPTS.keys()])

    if site != "Selecciona...":
        extra_prompt = st.text_area("¬øQuieres a√±adir instrucciones adicionales al prompt? (opcional)")

        if st.button("‚úçÔ∏è Generar art√≠culo"):
            try:
                with st.spinner("‚è≥ Transcribiendo v√≠deo con Whisper..."):
                    with open(tmp_path, "rb") as audio_file:
                        transcript_response = client.audio.transcriptions.create(
                            model="whisper-1",
                            file=audio_file,
                            response_format="json"
                        )
                    transcription = transcript_response.text

                st.success("‚úÖ Transcripci√≥n completada")
                st.text_area("Texto transcrito:", transcription, height=200)

                full_prompt = PROMPTS[site]
                if editor != "Ningun@":
                    full_prompt += "\n\nContexto del editor:\n" + EDITORS[editor]
                full_prompt += "\n\nTranscripci√≥n:\n" + transcription
                if extra_prompt:
                    full_prompt += "\n\nInstrucciones adicionales del editor:\n" + extra_prompt

                with st.spinner("üß† Generando art√≠culo con ChatGPT..."):
                    chat_response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[
                            {"role": "system", "content": "Eres un redactor profesional especializado en contenido local."},
                            {"role": "user", "content": full_prompt}
                        ],
                        temperature=0.7
                    )
                    article = chat_response.choices[0].message.content

                st.session_state["article"] = article  # <-- Guarda el art√≠culo en session_state

                st.success("‚úÖ Art√≠culo generado")
            except Exception as e:
                st.error(f"‚ùå Error al procesar el archivo: {str(e)}")
            finally:
                os.remove(tmp_path)

        # Mostrar el art√≠culo si existe en session_state
        if "article" in st.session_state:
            article = st.session_state["article"]
            st.subheader("üîé Vista previa del art√≠culo")
            st.markdown(article, unsafe_allow_html=True)

            st.subheader("üìã C√≥digo Markdown")
            st.code(article)

            st.download_button("‚¨áÔ∏è Descargar como HTML", data=article, file_name="articulo.html", mime="text/html", use_container_width=True)
            st.text_input("Copia manual:", article, label_visibility="collapsed", disabled=True)
            st.toast("Texto copiado (usa Ctrl+C en el cuadro de arriba)", icon="‚úÖ")
